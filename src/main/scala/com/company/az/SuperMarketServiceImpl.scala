package com.company.az

import akka.actor.typed.receptionist.{Receptionist, ServiceKey}
import akka.actor.typed.{ActorRefResolver, ActorSystem}
import akka.actor.typed.scaladsl.AskPattern.{Askable, schedulerFromActorSystem}
import akka.util.Timeout
import com.supermarket.az.{
  AddTransactionToRetail,
  GetTransaction,
  SuperMarketMessages,
  SuperMarketServiceProto,
  TransactionReply}
import scala.concurrent.Future
import scala.concurrent.duration.DurationInt

class SuperMarketServiceImpl(implicit val system: ActorSystem[_]) extends SuperMarketServiceProto {  /* this class is implementing SuperMarketProto trait which
                                                                                                         is generated by Akka grpc.  */

  val actorRefResolver: ActorRefResolver = ActorRefResolver(system)
  implicit val timeout: Timeout = Timeout(3.seconds)
  implicit val ec = system.executionContext

  override def createTransaction(in: AddTransactionToRetail): Future[TransactionReply] = {
    system.receptionist.ask[Receptionist.Listing] { replyTo =>
      Receptionist.Find(ServiceKey[SuperMarketMessages](s"retail-${in.retailId}"), replyTo)
    }
    .flatMap { listing =>
      val serviceInstances = listing.serviceInstances(ServiceKey[SuperMarketMessages](s"retail-${in.retailId}"))
      serviceInstances.head.ask[TransactionReply](ref => in.copy(replTo = actorRefResolver.toSerializationFormat(ref)))
    }
  }

  override def getTransactionById(in: GetTransaction): Future[TransactionReply] = {
    system.receptionist.ask[Receptionist.Listing] { replyTo =>
      Receptionist.Find(ServiceKey[SuperMarketMessages](s"retail-${in.retailId}"), replyTo)
    }
    .flatMap { listing =>
      val serviceInstances = listing.serviceInstances(ServiceKey[SuperMarketMessages](s"retail-${in.retailId}"))
      serviceInstances.head.ask[TransactionReply](ref => in.copy(replyTo = actorRefResolver.toSerializationFormat(ref)))
    }
  }
}